!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ASSERT	common.h	26;"	d
BBLUE	common.h	16;"	d
BCYAN	common.h	20;"	d
BGREEN	common.h	12;"	d
BINARY_OP	vm.c	38;"	d	file:
BLUE	common.h	15;"	d
BMAGENTA	common.h	18;"	d
BRED	common.h	10;"	d
BYELLOW	common.h	14;"	d
CFLAGS	Makefile	/^CFLAGS=-std=c11 -pedantic$/;"	m
CHECK	scanner.c	141;"	d	file:
CHECK	scanner.c	142;"	d	file:
CHECK	scanner.c	171;"	d	file:
CYAN	common.h	19;"	d
Chunk	chunk.h	/^} Chunk;$/;"	t	typeref:struct:__anon2
DEBUG_TRACE_EXECUTION	common.h	35;"	d
DUAL_TOKEN	scanner.c	192;"	d	file:
FREE_ARRAY	memory.h	8;"	d
GREEN	common.h	11;"	d
GROW_ARRAY	memory.h	11;"	d
GROW_CAPACITY	memory.h	5;"	d
INTERPRET_COMPILE_ERROR	vm.h	/^    INTERPRET_COMPILE_ERROR,$/;"	e	enum:__anon8
INTERPRET_OK	vm.h	/^    INTERPRET_OK,$/;"	e	enum:__anon8
INTERPRET_RUNTIME_ERROR	vm.h	/^    INTERPRET_RUNTIME_ERROR,$/;"	e	enum:__anon8
InterpretResult	vm.h	/^} InterpretResult;$/;"	t	typeref:enum:__anon8
MAGENTA	common.h	17;"	d
OP_ADD	chunk.h	/^    OP_ADD,$/;"	e	enum:__anon1
OP_CONSTANT	chunk.h	/^    OP_CONSTANT,$/;"	e	enum:__anon1
OP_CONSTANT_LONG	chunk.h	/^    OP_CONSTANT_LONG,$/;"	e	enum:__anon1
OP_DIVIDE	chunk.h	/^    OP_DIVIDE,$/;"	e	enum:__anon1
OP_MULTIPLY	chunk.h	/^    OP_MULTIPLY,$/;"	e	enum:__anon1
OP_NEGATE	chunk.h	/^    OP_NEGATE,$/;"	e	enum:__anon1
OP_RETURN	chunk.h	/^    OP_RETURN,$/;"	e	enum:__anon1
OP_SUBTRACT	chunk.h	/^    OP_SUBTRACT,$/;"	e	enum:__anon1
OpCode	chunk.h	/^} OpCode;$/;"	t	typeref:enum:__anon1
READ_BYTE	vm.c	32;"	d	file:
READ_BYTE	vm.c	74;"	d	file:
READ_CONSTANT	vm.c	33;"	d	file:
READ_CONSTANT	vm.c	75;"	d	file:
READ_CONSTANT_LONG	vm.c	34;"	d	file:
RED	common.h	9;"	d
RESET	common.h	21;"	d
SIMPLE	debug.c	39;"	d	file:
SIMPLE	debug.c	59;"	d	file:
SIMPLE_TOKEN	scanner.c	191;"	d	file:
STACK_MAX	vm.h	6;"	d
STR	common.h	24;"	d
Scanner	scanner.c	/^} Scanner;$/;"	t	typeref:struct:__anon3	file:
TOKEN_AND	scanner.h	/^    TOKEN_AND, TOKEN_CLASS, TOKEN_ELSE, TOKEN_FALSE,$/;"	e	enum:__anon4
TOKEN_BANG	scanner.h	/^    TOKEN_BANG, TOKEN_BANG_EQUAL,$/;"	e	enum:__anon4
TOKEN_BANG_EQUAL	scanner.h	/^    TOKEN_BANG, TOKEN_BANG_EQUAL,$/;"	e	enum:__anon4
TOKEN_CLASS	scanner.h	/^    TOKEN_AND, TOKEN_CLASS, TOKEN_ELSE, TOKEN_FALSE,$/;"	e	enum:__anon4
TOKEN_COMMA	scanner.h	/^    TOKEN_COMMA, TOKEN_DOT, TOKEN_MINUS, TOKEN_PLUS,$/;"	e	enum:__anon4
TOKEN_DOT	scanner.h	/^    TOKEN_COMMA, TOKEN_DOT, TOKEN_MINUS, TOKEN_PLUS,$/;"	e	enum:__anon4
TOKEN_ELSE	scanner.h	/^    TOKEN_AND, TOKEN_CLASS, TOKEN_ELSE, TOKEN_FALSE,$/;"	e	enum:__anon4
TOKEN_EOF	scanner.h	/^    TOKEN_EOF,$/;"	e	enum:__anon4
TOKEN_EQUAL	scanner.h	/^    TOKEN_EQUAL, TOKEN_EQUAL_EQUAL,$/;"	e	enum:__anon4
TOKEN_EQUAL_EQUAL	scanner.h	/^    TOKEN_EQUAL, TOKEN_EQUAL_EQUAL,$/;"	e	enum:__anon4
TOKEN_ERROR	scanner.h	/^    TOKEN_ERROR,$/;"	e	enum:__anon4
TOKEN_FALSE	scanner.h	/^    TOKEN_AND, TOKEN_CLASS, TOKEN_ELSE, TOKEN_FALSE,$/;"	e	enum:__anon4
TOKEN_FOR	scanner.h	/^    TOKEN_FOR, TOKEN_FUN, TOKEN_IF, TOKEN_NIL, TOKEN_OR,$/;"	e	enum:__anon4
TOKEN_FUN	scanner.h	/^    TOKEN_FOR, TOKEN_FUN, TOKEN_IF, TOKEN_NIL, TOKEN_OR,$/;"	e	enum:__anon4
TOKEN_GREATER	scanner.h	/^    TOKEN_GREATER, TOKEN_GREATER_EQUAL,$/;"	e	enum:__anon4
TOKEN_GREATER_EQUAL	scanner.h	/^    TOKEN_GREATER, TOKEN_GREATER_EQUAL,$/;"	e	enum:__anon4
TOKEN_IDENTIFIER	scanner.h	/^    TOKEN_IDENTIFIER, TOKEN_STRING, TOKEN_NUMBER,$/;"	e	enum:__anon4
TOKEN_IF	scanner.h	/^    TOKEN_FOR, TOKEN_FUN, TOKEN_IF, TOKEN_NIL, TOKEN_OR,$/;"	e	enum:__anon4
TOKEN_LEFT_BRACE	scanner.h	/^    TOKEN_LEFT_BRACE, TOKEN_RIGHT_BRACE,$/;"	e	enum:__anon4
TOKEN_LEFT_PAREN	scanner.h	/^    TOKEN_LEFT_PAREN, TOKEN_RIGHT_PAREN,$/;"	e	enum:__anon4
TOKEN_LESS	scanner.h	/^    TOKEN_LESS, TOKEN_LESS_EQUAL,$/;"	e	enum:__anon4
TOKEN_LESS_EQUAL	scanner.h	/^    TOKEN_LESS, TOKEN_LESS_EQUAL,$/;"	e	enum:__anon4
TOKEN_MINUS	scanner.h	/^    TOKEN_COMMA, TOKEN_DOT, TOKEN_MINUS, TOKEN_PLUS,$/;"	e	enum:__anon4
TOKEN_NIL	scanner.h	/^    TOKEN_FOR, TOKEN_FUN, TOKEN_IF, TOKEN_NIL, TOKEN_OR,$/;"	e	enum:__anon4
TOKEN_NUMBER	scanner.h	/^    TOKEN_IDENTIFIER, TOKEN_STRING, TOKEN_NUMBER,$/;"	e	enum:__anon4
TOKEN_OR	scanner.h	/^    TOKEN_FOR, TOKEN_FUN, TOKEN_IF, TOKEN_NIL, TOKEN_OR,$/;"	e	enum:__anon4
TOKEN_PLUS	scanner.h	/^    TOKEN_COMMA, TOKEN_DOT, TOKEN_MINUS, TOKEN_PLUS,$/;"	e	enum:__anon4
TOKEN_PRINT	scanner.h	/^    TOKEN_PRINT, TOKEN_RETURN, TOKEN_SUPER, TOKEN_THIS,$/;"	e	enum:__anon4
TOKEN_RETURN	scanner.h	/^    TOKEN_PRINT, TOKEN_RETURN, TOKEN_SUPER, TOKEN_THIS,$/;"	e	enum:__anon4
TOKEN_RIGHT_BRACE	scanner.h	/^    TOKEN_LEFT_BRACE, TOKEN_RIGHT_BRACE,$/;"	e	enum:__anon4
TOKEN_RIGHT_PAREN	scanner.h	/^    TOKEN_LEFT_PAREN, TOKEN_RIGHT_PAREN,$/;"	e	enum:__anon4
TOKEN_SEMICOLON	scanner.h	/^    TOKEN_SEMICOLON, TOKEN_SLASH, TOKEN_STAR,$/;"	e	enum:__anon4
TOKEN_SLASH	scanner.h	/^    TOKEN_SEMICOLON, TOKEN_SLASH, TOKEN_STAR,$/;"	e	enum:__anon4
TOKEN_STAR	scanner.h	/^    TOKEN_SEMICOLON, TOKEN_SLASH, TOKEN_STAR,$/;"	e	enum:__anon4
TOKEN_STRING	scanner.h	/^    TOKEN_IDENTIFIER, TOKEN_STRING, TOKEN_NUMBER,$/;"	e	enum:__anon4
TOKEN_SUPER	scanner.h	/^    TOKEN_PRINT, TOKEN_RETURN, TOKEN_SUPER, TOKEN_THIS,$/;"	e	enum:__anon4
TOKEN_THIS	scanner.h	/^    TOKEN_PRINT, TOKEN_RETURN, TOKEN_SUPER, TOKEN_THIS,$/;"	e	enum:__anon4
TOKEN_TRUE	scanner.h	/^    TOKEN_TRUE, TOKEN_VAR, TOKEN_WHILE,$/;"	e	enum:__anon4
TOKEN_VAR	scanner.h	/^    TOKEN_TRUE, TOKEN_VAR, TOKEN_WHILE,$/;"	e	enum:__anon4
TOKEN_WHILE	scanner.h	/^    TOKEN_TRUE, TOKEN_VAR, TOKEN_WHILE,$/;"	e	enum:__anon4
Token	scanner.h	/^} Token;$/;"	t	typeref:struct:__anon5
TokenType	scanner.h	/^} TokenType;$/;"	t	typeref:enum:__anon4
VM	vm.h	/^} VM;$/;"	t	typeref:struct:__anon7
Value	value.h	/^typedef double Value;$/;"	t
ValueArray	value.h	/^} ValueArray;$/;"	t	typeref:struct:__anon6
YELLOW	common.h	13;"	d
_STR	common.h	23;"	d
addConstant	chunk.c	/^int addConstant(Chunk* chunk, Value value) {$/;"	f
advance	scanner.c	/^static char advance() {$/;"	f	file:
capacity	chunk.h	/^    uint32_t count, capacity;$/;"	m	struct:__anon2
capacity	value.h	/^    int capacity;$/;"	m	struct:__anon6
checkKeyword	scanner.c	/^static TokenType checkKeyword(int len, const char* str, TokenType t) {$/;"	f	file:
chunk	vm.h	/^    Chunk* chunk;$/;"	m	struct:__anon7
code	chunk.h	/^    uint8_t* code;$/;"	m	struct:__anon2
col	scanner.c	/^    int col;$/;"	m	struct:__anon3	file:
compile	compiler.c	/^void compile(const char* source) {$/;"	f
constantInstruction	debug.c	/^static int constantInstruction(const char* name, Chunk *chunk, int offset) {$/;"	f	file:
constants	chunk.h	/^    ValueArray constants;$/;"	m	struct:__anon2
count	chunk.h	/^    uint32_t count, capacity;$/;"	m	struct:__anon2
count	value.h	/^    int count;$/;"	m	struct:__anon6
current	scanner.c	/^    const char* current;$/;"	m	struct:__anon3	file:
disassembleChunk	debug.c	/^void disassembleChunk(Chunk* chunk, const char* name) {$/;"	f
disassembleInstruction	debug.c	/^int disassembleInstruction(Chunk* chunk, int offset) {$/;"	f
errorToken	scanner.c	/^static Token errorToken(const char* msg) {$/;"	f	file:
freeChunk	chunk.c	/^void freeChunk(Chunk* chunk) {$/;"	f
freeVM	vm.c	/^void freeVM() {$/;"	f
freeValueArray	value.c	/^void freeValueArray(ValueArray* arr) {$/;"	f
identifier	scanner.c	/^static Token identifier() {$/;"	f	file:
identifierType	scanner.c	/^static TokenType identifierType() {$/;"	f	file:
initChunk	chunk.c	/^void initChunk(Chunk* chunk) {$/;"	f
initScanner	scanner.c	/^void initScanner(const char* source) {$/;"	f
initVM	vm.c	/^void initVM() {$/;"	f
initValueArray	value.c	/^void initValueArray(ValueArray* arr) {$/;"	f
interpret	vm.c	/^InterpretResult interpret(const char* source) {$/;"	f
ip	vm.h	/^    uint8_t *ip;$/;"	m	struct:__anon7
isAlpha	scanner.c	/^static bool isAlpha(char c) {$/;"	f	file:
isAtEnd	scanner.c	/^static bool isAtEnd() {$/;"	f	file:
isDigit	scanner.c	/^static bool isDigit(char c) {$/;"	f	file:
length	scanner.h	/^    int length;$/;"	m	struct:__anon5
line	scanner.c	/^    int line;$/;"	m	struct:__anon3	file:
line	scanner.h	/^    int line;$/;"	m	struct:__anon5
line_start	scanner.c	/^    const char* line_start;$/;"	m	struct:__anon3	file:
lines	chunk.h	/^    int* lines;$/;"	m	struct:__anon2
main	main.c	/^int main(int argc, const char* argv[]) {$/;"	f
makeToken	scanner.c	/^static Token makeToken(TokenType type) {$/;"	f	file:
match	scanner.c	/^static char match(char c) {$/;"	f	file:
number	scanner.c	/^static Token number() {$/;"	f	file:
peek	scanner.c	/^static char peek() {$/;"	f	file:
peekNext	scanner.c	/^static char peekNext() {$/;"	f	file:
pop	vm.c	/^Value pop() {$/;"	f
printValue	value.c	/^void printValue(Value value) {$/;"	f
push	vm.c	/^void push(Value value) {$/;"	f
readFile	main.c	/^static char* readFile(const char* path) {$/;"	f	file:
reallocate	memory.c	/^void* reallocate(void* ptr, size_t olds, size_t news) {$/;"	f
repl	main.c	/^static void repl() {$/;"	f	file:
resetStack	vm.c	/^static void resetStack() {$/;"	f	file:
run	vm.c	/^static InterpretResult run() {$/;"	f	file:
runFile	main.c	/^static void runFile(const char* path) {$/;"	f	file:
scanToken	scanner.c	/^Token scanToken() {$/;"	f
scanner	scanner.c	/^Scanner scanner;$/;"	v
simpleInstruction	debug.c	/^static int simpleInstruction(const char* name, int offset) {$/;"	f	file:
skipWhitespace	scanner.c	/^static void skipWhitespace() {$/;"	f	file:
stack	vm.h	/^    Value stack[STACK_MAX];$/;"	m	struct:__anon7
stackTop	vm.h	/^    Value *stackTop;$/;"	m	struct:__anon7
start	scanner.c	/^    const char* start;$/;"	m	struct:__anon3	file:
start	scanner.h	/^    const char* start;$/;"	m	struct:__anon5
string	scanner.c	/^static Token string() {$/;"	f	file:
type	scanner.h	/^    TokenType type;$/;"	m	struct:__anon5
values	value.h	/^    Value* values;$/;"	m	struct:__anon6
vm	vm.c	/^VM vm;$/;"	v
writeChunk	chunk.c	/^void writeChunk(Chunk* chunk, uint8_t byte, int line) {$/;"	f
writeConstant	chunk.c	/^void writeConstant(Chunk* chunk, Value value, int line) {$/;"	f
writeValueArray	value.c	/^void writeValueArray(ValueArray* arr, Value value) {$/;"	f
