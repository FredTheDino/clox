!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/a3c87ab5/
ALLOCATE	memory.h	/^#define ALLOCATE(/;"	d
ALLOCATE_OBJ	object.c	/^#define ALLOCATE_OBJ(/;"	d	file:
ASSERT	common.h	/^#define ASSERT(/;"	d
AS_BOOL	value.h	/^#define AS_BOOL(/;"	d
AS_CLOSURE	object.h	/^#define AS_CLOSURE(/;"	d
AS_CSTRING	object.h	/^#define AS_CSTRING(/;"	d
AS_FUNCTION	object.h	/^#define AS_FUNCTION(/;"	d
AS_NATIVE	object.h	/^#define AS_NATIVE(/;"	d
AS_NUMBER	value.h	/^#define AS_NUMBER(/;"	d
AS_OBJ	value.h	/^#define AS_OBJ(/;"	d
AS_STRING	object.h	/^#define AS_STRING(/;"	d
BBLUE	common.h	/^#define BBLUE /;"	d
BCYAN	common.h	/^#define BCYAN /;"	d
BGREEN	common.h	/^#define BGREEN /;"	d
BINARY_OP	vm.c	/^#define BINARY_OP(/;"	d	file:
BLUE	common.h	/^#define BLUE /;"	d
BMAGENTA	common.h	/^#define BMAGENTA /;"	d
BOOL_VAL	value.h	/^#define BOOL_VAL(/;"	d
BRED	common.h	/^#define BRED /;"	d
BYELLOW	common.h	/^#define BYELLOW /;"	d
CFLAGS	Makefile	/^CFLAGS=-std=c11 -Wpedantic -g$/;"	m
CHECK	scanner.c	/^#define CHECK(/;"	d	file:
CYAN	common.h	/^#define CYAN /;"	d
CallFrame	vm.h	/^} CallFrame;$/;"	t	typeref:struct:__anon7c9f9a3e0108
Chunk	chunk.h	/^} Chunk;$/;"	t	typeref:struct:__anonc3a0ef940208
Compiler	compiler.c	/^typedef struct Compiler {$/;"	s	file:
Compiler	compiler.c	/^} Compiler;$/;"	t	typeref:struct:Compiler	file:
DUAL_TOKEN	scanner.c	/^#define DUAL_TOKEN(/;"	d	file:
Entry	table.h	/^} Entry;$/;"	t	typeref:struct:__anonce91d8230108
FRAMES_MAX	vm.h	/^#define FRAMES_MAX /;"	d
FREE	memory.h	/^#define FREE(/;"	d
FREE_ARRAY	memory.h	/^#define FREE_ARRAY(/;"	d
FunctionType	compiler.c	/^} FunctionType;$/;"	t	typeref:enum:__anon8a0484b10603	file:
GREEN	common.h	/^#define GREEN /;"	d
GROW_ARRAY	memory.h	/^#define GROW_ARRAY(/;"	d
GROW_CAPACITY	memory.h	/^#define GROW_CAPACITY(/;"	d
INTERPRET_COMPILE_ERROR	vm.h	/^    INTERPRET_COMPILE_ERROR,$/;"	e	enum:__anon7c9f9a3e0303
INTERPRET_OK	vm.h	/^    INTERPRET_OK,$/;"	e	enum:__anon7c9f9a3e0303
INTERPRET_RUNTIME_ERROR	vm.h	/^    INTERPRET_RUNTIME_ERROR,$/;"	e	enum:__anon7c9f9a3e0303
IS_BOOL	value.h	/^#define IS_BOOL(/;"	d
IS_CLOSURE	object.h	/^#define IS_CLOSURE(/;"	d
IS_FUNCTION	object.h	/^#define IS_FUNCTION(/;"	d
IS_NATIVE	object.h	/^#define IS_NATIVE(/;"	d
IS_NIL	value.h	/^#define IS_NIL(/;"	d
IS_NUMBER	value.h	/^#define IS_NUMBER(/;"	d
IS_OBJ	value.h	/^#define IS_OBJ(/;"	d
IS_STRING	object.h	/^#define IS_STRING(/;"	d
InterpretResult	vm.h	/^} InterpretResult;$/;"	t	typeref:enum:__anon7c9f9a3e0303
Local	compiler.c	/^} Local;$/;"	t	typeref:struct:__anon8a0484b10408	file:
MAGENTA	common.h	/^#define MAGENTA /;"	d
NIL_VAL	value.h	/^#define NIL_VAL /;"	d
NUMBER_VAL	value.h	/^#define NUMBER_VAL(/;"	d
NativeFn	object.h	/^typedef Value (*NativeFn)(int argCount, Value* args);$/;"	t	typeref:typename:Value (*)(int argCount,Value * args)
OBJ_CLOSURE	object.h	/^     OBJ_CLOSURE,$/;"	e	enum:__anon62a894520103
OBJ_FUNCTION	object.h	/^     OBJ_FUNCTION,$/;"	e	enum:__anon62a894520103
OBJ_NATIVE	object.h	/^     OBJ_NATIVE,$/;"	e	enum:__anon62a894520103
OBJ_STRING	object.h	/^     OBJ_STRING,$/;"	e	enum:__anon62a894520103
OBJ_TYPE	object.h	/^#define OBJ_TYPE(/;"	d
OBJ_UPVALUE	object.h	/^     OBJ_UPVALUE,$/;"	e	enum:__anon62a894520103
OBJ_VAL	value.h	/^#define OBJ_VAL(/;"	d
OP_ADD	chunk.h	/^    OP_ADD,$/;"	e	enum:__anonc3a0ef940103
OP_CALL	chunk.h	/^    OP_CALL,$/;"	e	enum:__anonc3a0ef940103
OP_CLOSURE	chunk.h	/^    OP_CLOSURE,$/;"	e	enum:__anonc3a0ef940103
OP_CONSTANT	chunk.h	/^    OP_CONSTANT,$/;"	e	enum:__anonc3a0ef940103
OP_CONSTANT_LONG	chunk.h	/^    OP_CONSTANT_LONG,$/;"	e	enum:__anonc3a0ef940103
OP_DEFINE_GLOBAL	chunk.h	/^    OP_DEFINE_GLOBAL,$/;"	e	enum:__anonc3a0ef940103
OP_DIVIDE	chunk.h	/^    OP_DIVIDE,$/;"	e	enum:__anonc3a0ef940103
OP_EQUAL	chunk.h	/^    OP_EQUAL,$/;"	e	enum:__anonc3a0ef940103
OP_FALSE	chunk.h	/^    OP_FALSE,$/;"	e	enum:__anonc3a0ef940103
OP_GET_GLOBAL	chunk.h	/^    OP_GET_GLOBAL,$/;"	e	enum:__anonc3a0ef940103
OP_GET_LOCAL	chunk.h	/^    OP_GET_LOCAL,$/;"	e	enum:__anonc3a0ef940103
OP_GET_UPVALUE	chunk.h	/^    OP_GET_UPVALUE,$/;"	e	enum:__anonc3a0ef940103
OP_GREATER	chunk.h	/^    OP_GREATER,$/;"	e	enum:__anonc3a0ef940103
OP_JUMP	chunk.h	/^    OP_JUMP,$/;"	e	enum:__anonc3a0ef940103
OP_JUMP_IF_FALSE	chunk.h	/^    OP_JUMP_IF_FALSE,$/;"	e	enum:__anonc3a0ef940103
OP_LESS	chunk.h	/^    OP_LESS,$/;"	e	enum:__anonc3a0ef940103
OP_LOOP	chunk.h	/^    OP_LOOP,$/;"	e	enum:__anonc3a0ef940103
OP_MULTIPLY	chunk.h	/^    OP_MULTIPLY,$/;"	e	enum:__anonc3a0ef940103
OP_NEGATE	chunk.h	/^    OP_NEGATE,$/;"	e	enum:__anonc3a0ef940103
OP_NIL	chunk.h	/^    OP_NIL,$/;"	e	enum:__anonc3a0ef940103
OP_NOT	chunk.h	/^    OP_NOT,$/;"	e	enum:__anonc3a0ef940103
OP_POP	chunk.h	/^    OP_POP,$/;"	e	enum:__anonc3a0ef940103
OP_PRINT	chunk.h	/^    OP_PRINT,$/;"	e	enum:__anonc3a0ef940103
OP_RETURN	chunk.h	/^    OP_RETURN,$/;"	e	enum:__anonc3a0ef940103
OP_SET_GLOBAL	chunk.h	/^    OP_SET_GLOBAL,$/;"	e	enum:__anonc3a0ef940103
OP_SET_LOCAL	chunk.h	/^    OP_SET_LOCAL,$/;"	e	enum:__anonc3a0ef940103
OP_SET_UPVALUE	chunk.h	/^    OP_SET_UPVALUE,$/;"	e	enum:__anonc3a0ef940103
OP_SUBTRACT	chunk.h	/^    OP_SUBTRACT,$/;"	e	enum:__anonc3a0ef940103
OP_TRUE	chunk.h	/^    OP_TRUE,$/;"	e	enum:__anonc3a0ef940103
Obj	object.h	/^struct Obj {$/;"	s
Obj	value.h	/^typedef struct Obj Obj;$/;"	t	typeref:struct:Obj
ObjClosure	object.h	/^} ObjClosure;$/;"	t	typeref:struct:__anon62a894520308
ObjFunction	object.h	/^} ObjFunction;$/;"	t	typeref:struct:__anon62a894520208
ObjNative	object.h	/^} ObjNative;$/;"	t	typeref:struct:__anon62a894520408
ObjString	object.h	/^struct ObjString {$/;"	s
ObjString	value.h	/^typedef struct ObjString ObjString;$/;"	t	typeref:struct:ObjString
ObjType	object.h	/^} ObjType;$/;"	t	typeref:enum:__anon62a894520103
ObjUpvalue	object.h	/^typedef struct ObjUpvalue {$/;"	s
ObjUpvalue	object.h	/^} ObjUpvalue;$/;"	t	typeref:struct:ObjUpvalue
OpCode	chunk.h	/^} OpCode;$/;"	t	typeref:enum:__anonc3a0ef940103
PREC_AND	compiler.c	/^    PREC_AND,         \/\/ and$/;"	e	enum:__anon8a0484b10203	file:
PREC_ASSIGNMENT	compiler.c	/^    PREC_ASSIGNMENT,  \/\/ =$/;"	e	enum:__anon8a0484b10203	file:
PREC_CALL	compiler.c	/^    PREC_CALL,        \/\/ . ()$/;"	e	enum:__anon8a0484b10203	file:
PREC_COMPARISON	compiler.c	/^    PREC_COMPARISON,  \/\/ < > <= >=$/;"	e	enum:__anon8a0484b10203	file:
PREC_EQUALITY	compiler.c	/^    PREC_EQUALITY,    \/\/ == !=$/;"	e	enum:__anon8a0484b10203	file:
PREC_FACTOR	compiler.c	/^    PREC_FACTOR,      \/\/ * \/$/;"	e	enum:__anon8a0484b10203	file:
PREC_NONE	compiler.c	/^    PREC_NONE,$/;"	e	enum:__anon8a0484b10203	file:
PREC_OR	compiler.c	/^    PREC_OR,          \/\/ or$/;"	e	enum:__anon8a0484b10203	file:
PREC_PRIMARY	compiler.c	/^    PREC_PRIMARY$/;"	e	enum:__anon8a0484b10203	file:
PREC_TERM	compiler.c	/^    PREC_TERM,        \/\/ + -$/;"	e	enum:__anon8a0484b10203	file:
PREC_UNARY	compiler.c	/^    PREC_UNARY,       \/\/ ! -$/;"	e	enum:__anon8a0484b10203	file:
ParseFn	compiler.c	/^typedef void (*ParseFn)(bool canAssign);$/;"	t	typeref:typename:void (*)(bool canAssign)	file:
ParseRule	compiler.c	/^} ParseRule;$/;"	t	typeref:struct:__anon8a0484b10308	file:
Parser	compiler.c	/^} Parser;$/;"	t	typeref:struct:__anon8a0484b10108	file:
Precedence	compiler.c	/^} Precedence;$/;"	t	typeref:enum:__anon8a0484b10203	file:
READ_BYTE	vm.c	/^#define READ_BYTE(/;"	d	file:
READ_CONSTANT	vm.c	/^#define READ_CONSTANT(/;"	d	file:
READ_CONSTANT_LONG	vm.c	/^#define READ_CONSTANT_LONG(/;"	d	file:
READ_SHORT	vm.c	/^#define READ_SHORT(/;"	d	file:
READ_STRING	vm.c	/^#define READ_STRING(/;"	d	file:
RED	common.h	/^#define RED /;"	d
RESET	common.h	/^#define RESET /;"	d
SIMPLE	debug.c	/^#define SIMPLE(/;"	d	file:
SIMPLE_TOKEN	scanner.c	/^#define SIMPLE_TOKEN(/;"	d	file:
STACK_MAX	vm.h	/^#define STACK_MAX /;"	d
STR	common.h	/^#define STR(/;"	d
Scanner	scanner.c	/^} Scanner;$/;"	t	typeref:struct:__anond6e0f0600108	file:
TABLE_MAX_LOAD	table.c	/^#define TABLE_MAX_LOAD /;"	d	file:
TOKEN_AND	scanner.h	/^    TOKEN_AND, TOKEN_CLASS, TOKEN_ELSE, TOKEN_FALSE,$/;"	e	enum:__anond6e0f0650103
TOKEN_BANG	scanner.h	/^    TOKEN_BANG, TOKEN_BANG_EQUAL,$/;"	e	enum:__anond6e0f0650103
TOKEN_BANG_EQUAL	scanner.h	/^    TOKEN_BANG, TOKEN_BANG_EQUAL,$/;"	e	enum:__anond6e0f0650103
TOKEN_CLASS	scanner.h	/^    TOKEN_AND, TOKEN_CLASS, TOKEN_ELSE, TOKEN_FALSE,$/;"	e	enum:__anond6e0f0650103
TOKEN_COMMA	scanner.h	/^    TOKEN_COMMA, TOKEN_DOT, TOKEN_MINUS, TOKEN_PLUS,$/;"	e	enum:__anond6e0f0650103
TOKEN_DOT	scanner.h	/^    TOKEN_COMMA, TOKEN_DOT, TOKEN_MINUS, TOKEN_PLUS,$/;"	e	enum:__anond6e0f0650103
TOKEN_ELSE	scanner.h	/^    TOKEN_AND, TOKEN_CLASS, TOKEN_ELSE, TOKEN_FALSE,$/;"	e	enum:__anond6e0f0650103
TOKEN_EOF	scanner.h	/^    TOKEN_EOF,$/;"	e	enum:__anond6e0f0650103
TOKEN_EQUAL	scanner.h	/^    TOKEN_EQUAL, TOKEN_EQUAL_EQUAL,$/;"	e	enum:__anond6e0f0650103
TOKEN_EQUAL_EQUAL	scanner.h	/^    TOKEN_EQUAL, TOKEN_EQUAL_EQUAL,$/;"	e	enum:__anond6e0f0650103
TOKEN_ERROR	scanner.h	/^    TOKEN_ERROR,$/;"	e	enum:__anond6e0f0650103
TOKEN_FALSE	scanner.h	/^    TOKEN_AND, TOKEN_CLASS, TOKEN_ELSE, TOKEN_FALSE,$/;"	e	enum:__anond6e0f0650103
TOKEN_FOR	scanner.h	/^    TOKEN_FOR, TOKEN_FUN, TOKEN_IF, TOKEN_NIL, TOKEN_OR,$/;"	e	enum:__anond6e0f0650103
TOKEN_FUN	scanner.h	/^    TOKEN_FOR, TOKEN_FUN, TOKEN_IF, TOKEN_NIL, TOKEN_OR,$/;"	e	enum:__anond6e0f0650103
TOKEN_GREATER	scanner.h	/^    TOKEN_GREATER, TOKEN_GREATER_EQUAL,$/;"	e	enum:__anond6e0f0650103
TOKEN_GREATER_EQUAL	scanner.h	/^    TOKEN_GREATER, TOKEN_GREATER_EQUAL,$/;"	e	enum:__anond6e0f0650103
TOKEN_IDENTIFIER	scanner.h	/^    TOKEN_IDENTIFIER, TOKEN_STRING, TOKEN_NUMBER,$/;"	e	enum:__anond6e0f0650103
TOKEN_IF	scanner.h	/^    TOKEN_FOR, TOKEN_FUN, TOKEN_IF, TOKEN_NIL, TOKEN_OR,$/;"	e	enum:__anond6e0f0650103
TOKEN_LEFT_BRACE	scanner.h	/^    TOKEN_LEFT_BRACE, TOKEN_RIGHT_BRACE,$/;"	e	enum:__anond6e0f0650103
TOKEN_LEFT_PAREN	scanner.h	/^    TOKEN_LEFT_PAREN, TOKEN_RIGHT_PAREN,$/;"	e	enum:__anond6e0f0650103
TOKEN_LESS	scanner.h	/^    TOKEN_LESS, TOKEN_LESS_EQUAL,$/;"	e	enum:__anond6e0f0650103
TOKEN_LESS_EQUAL	scanner.h	/^    TOKEN_LESS, TOKEN_LESS_EQUAL,$/;"	e	enum:__anond6e0f0650103
TOKEN_MINUS	scanner.h	/^    TOKEN_COMMA, TOKEN_DOT, TOKEN_MINUS, TOKEN_PLUS,$/;"	e	enum:__anond6e0f0650103
TOKEN_NIL	scanner.h	/^    TOKEN_FOR, TOKEN_FUN, TOKEN_IF, TOKEN_NIL, TOKEN_OR,$/;"	e	enum:__anond6e0f0650103
TOKEN_NUMBER	scanner.h	/^    TOKEN_IDENTIFIER, TOKEN_STRING, TOKEN_NUMBER,$/;"	e	enum:__anond6e0f0650103
TOKEN_OR	scanner.h	/^    TOKEN_FOR, TOKEN_FUN, TOKEN_IF, TOKEN_NIL, TOKEN_OR,$/;"	e	enum:__anond6e0f0650103
TOKEN_PLUS	scanner.h	/^    TOKEN_COMMA, TOKEN_DOT, TOKEN_MINUS, TOKEN_PLUS,$/;"	e	enum:__anond6e0f0650103
TOKEN_PRINT	scanner.h	/^    TOKEN_PRINT, TOKEN_RETURN, TOKEN_SUPER, TOKEN_THIS,$/;"	e	enum:__anond6e0f0650103
TOKEN_RETURN	scanner.h	/^    TOKEN_PRINT, TOKEN_RETURN, TOKEN_SUPER, TOKEN_THIS,$/;"	e	enum:__anond6e0f0650103
TOKEN_RIGHT_BRACE	scanner.h	/^    TOKEN_LEFT_BRACE, TOKEN_RIGHT_BRACE,$/;"	e	enum:__anond6e0f0650103
TOKEN_RIGHT_PAREN	scanner.h	/^    TOKEN_LEFT_PAREN, TOKEN_RIGHT_PAREN,$/;"	e	enum:__anond6e0f0650103
TOKEN_SEMICOLON	scanner.h	/^    TOKEN_SEMICOLON, TOKEN_SLASH, TOKEN_STAR,$/;"	e	enum:__anond6e0f0650103
TOKEN_SLASH	scanner.h	/^    TOKEN_SEMICOLON, TOKEN_SLASH, TOKEN_STAR,$/;"	e	enum:__anond6e0f0650103
TOKEN_STAR	scanner.h	/^    TOKEN_SEMICOLON, TOKEN_SLASH, TOKEN_STAR,$/;"	e	enum:__anond6e0f0650103
TOKEN_STRING	scanner.h	/^    TOKEN_IDENTIFIER, TOKEN_STRING, TOKEN_NUMBER,$/;"	e	enum:__anond6e0f0650103
TOKEN_SUPER	scanner.h	/^    TOKEN_PRINT, TOKEN_RETURN, TOKEN_SUPER, TOKEN_THIS,$/;"	e	enum:__anond6e0f0650103
TOKEN_THIS	scanner.h	/^    TOKEN_PRINT, TOKEN_RETURN, TOKEN_SUPER, TOKEN_THIS,$/;"	e	enum:__anond6e0f0650103
TOKEN_TRUE	scanner.h	/^    TOKEN_TRUE, TOKEN_VAR, TOKEN_WHILE,$/;"	e	enum:__anond6e0f0650103
TOKEN_VAR	scanner.h	/^    TOKEN_TRUE, TOKEN_VAR, TOKEN_WHILE,$/;"	e	enum:__anond6e0f0650103
TOKEN_WHILE	scanner.h	/^    TOKEN_TRUE, TOKEN_VAR, TOKEN_WHILE,$/;"	e	enum:__anond6e0f0650103
TYPE_FUNCTION	compiler.c	/^    TYPE_FUNCTION,$/;"	e	enum:__anon8a0484b10603	file:
TYPE_SCRIPT	compiler.c	/^    TYPE_SCRIPT,$/;"	e	enum:__anon8a0484b10603	file:
Table	table.h	/^} Table;$/;"	t	typeref:struct:__anonce91d8230208
Token	scanner.h	/^} Token;$/;"	t	typeref:struct:__anond6e0f0650208
TokenType	scanner.h	/^} TokenType;$/;"	t	typeref:enum:__anond6e0f0650103
UINT8_COUNT	common.h	/^#define UINT8_COUNT /;"	d
Upvalues	compiler.c	/^} Upvalues;$/;"	t	typeref:struct:__anon8a0484b10508	file:
VAL_BOOL	value.h	/^    VAL_BOOL,$/;"	e	enum:__anon694036180103
VAL_NIL	value.h	/^    VAL_NIL,$/;"	e	enum:__anon694036180103
VAL_NUMBER	value.h	/^    VAL_NUMBER,$/;"	e	enum:__anon694036180103
VAL_OBJ	value.h	/^    VAL_OBJ,$/;"	e	enum:__anon694036180103
VM	vm.h	/^} VM;$/;"	t	typeref:struct:__anon7c9f9a3e0208
Value	value.h	/^} Value;$/;"	t	typeref:struct:__anon694036180208
ValueArray	value.h	/^} ValueArray;$/;"	t	typeref:struct:__anon694036180408
ValueType	value.h	/^} ValueType;$/;"	t	typeref:enum:__anon694036180103
YELLOW	common.h	/^#define YELLOW /;"	d
_STR	common.h	/^#define _STR(/;"	d
__anon62a894520103	object.h	/^typedef enum {$/;"	g
__anon62a894520208	object.h	/^typedef struct {$/;"	s
__anon62a894520308	object.h	/^typedef struct {$/;"	s
__anon62a894520408	object.h	/^typedef struct {$/;"	s
__anon694036180103	value.h	/^typedef enum {$/;"	g
__anon694036180208	value.h	/^typedef struct {$/;"	s
__anon69403618030a	value.h	/^    union {$/;"	u	struct:__anon694036180208
__anon694036180408	value.h	/^typedef struct {$/;"	s
__anon7c9f9a3e0108	vm.h	/^typedef struct {$/;"	s
__anon7c9f9a3e0208	vm.h	/^typedef struct {$/;"	s
__anon7c9f9a3e0303	vm.h	/^typedef enum {$/;"	g
__anon8a0484b10108	compiler.c	/^typedef struct {$/;"	s	file:
__anon8a0484b10203	compiler.c	/^typedef enum {$/;"	g	file:
__anon8a0484b10308	compiler.c	/^typedef struct {$/;"	s	file:
__anon8a0484b10408	compiler.c	/^typedef struct {$/;"	s	file:
__anon8a0484b10508	compiler.c	/^typedef struct {$/;"	s	file:
__anon8a0484b10603	compiler.c	/^typedef enum {$/;"	g	file:
__anonc3a0ef940103	chunk.h	/^typedef enum {$/;"	g
__anonc3a0ef940208	chunk.h	/^typedef struct {$/;"	s
__anonce91d8230108	table.h	/^typedef struct {$/;"	s
__anonce91d8230208	table.h	/^typedef struct {$/;"	s
__anond6e0f0600108	scanner.c	/^typedef struct {$/;"	s	file:
__anond6e0f0650103	scanner.h	/^typedef enum {$/;"	g
__anond6e0f0650208	scanner.h	/^typedef struct {$/;"	s
__assert_failed	main.c	/^void __assert_failed() {$/;"	f	typeref:typename:void
addConstant	chunk.c	/^int addConstant(Chunk* chunk, Value value) {$/;"	f	typeref:typename:int
addLocal	compiler.c	/^static void addLocal(Token name) {$/;"	f	typeref:typename:void	file:
addUpvalue	compiler.c	/^static int addUpvalue(Compiler* compiler, uint8_t index, bool isLocal) {$/;"	f	typeref:typename:int	file:
adjustCapacity	table.c	/^static void adjustCapacity(Table* table, int capacity) {$/;"	f	typeref:typename:void	file:
advance	compiler.c	/^static void advance() {$/;"	f	typeref:typename:void	file:
advance	scanner.c	/^static char advance() {$/;"	f	typeref:typename:char	file:
allocateObject	object.c	/^static Obj* allocateObject(size_t size, ObjType type) {$/;"	f	typeref:typename:Obj *	file:
allocateString	object.c	/^static ObjString* allocateString(char* chars, int length, uint32_t hash) {$/;"	f	typeref:typename:ObjString *	file:
and_	compiler.c	/^static void and_(bool canAssign) {$/;"	f	typeref:typename:void	file:
argumentList	compiler.c	/^static uint8_t argumentList() {$/;"	f	typeref:typename:uint8_t	file:
arity	object.h	/^    int arity;$/;"	m	struct:__anon62a894520208	typeref:typename:int
as	value.h	/^    } as;$/;"	m	struct:__anon694036180208	typeref:union:__anon694036180208::__anon69403618030a
beginScope	compiler.c	/^static void beginScope() {$/;"	f	typeref:typename:void	file:
binary	compiler.c	/^static void binary(bool _) {$/;"	f	typeref:typename:void	file:
block	compiler.c	/^static void block() {$/;"	f	typeref:typename:void	file:
boolean	value.h	/^        bool boolean;$/;"	m	union:__anon694036180208::__anon69403618030a	typeref:typename:bool
byteInstruction	debug.c	/^static int byteInstruction(const char* name, Chunk *chunk, int offset) {$/;"	f	typeref:typename:int	file:
call	compiler.c	/^static void call(bool _) {$/;"	f	typeref:typename:void	file:
call	vm.c	/^static bool call(ObjClosure* closure, int argCount) {$/;"	f	typeref:typename:bool	file:
callValue	vm.c	/^static bool callValue(Value callee, int argCount) {$/;"	f	typeref:typename:bool	file:
capacity	chunk.h	/^    uint32_t count, capacity;$/;"	m	struct:__anonc3a0ef940208	typeref:typename:uint32_t
capacity	table.h	/^    int capacity;$/;"	m	struct:__anonce91d8230208	typeref:typename:int
capacity	value.h	/^    int capacity;$/;"	m	struct:__anon694036180408	typeref:typename:int
captureUpvalue	vm.c	/^static ObjUpvalue* captureUpvalue(Value* local) {$/;"	f	typeref:typename:ObjUpvalue *	file:
chars	object.h	/^    char* chars;$/;"	m	struct:ObjString	typeref:typename:char *
check	compiler.c	/^static bool check(TokenType type) {$/;"	f	typeref:typename:bool	file:
checkKeyword	scanner.c	/^static TokenType checkKeyword(int len, const char* str, TokenType t) {$/;"	f	typeref:typename:TokenType	file:
chunk	object.h	/^    Chunk chunk;$/;"	m	struct:__anon62a894520208	typeref:typename:Chunk
clockNative	vm.c	/^static Value clockNative(int argCount, Value* args) {$/;"	f	typeref:typename:Value	file:
closure	vm.h	/^    ObjClosure* closure;$/;"	m	struct:__anon7c9f9a3e0108	typeref:typename:ObjClosure *
clox	Makefile	/^clox: main$/;"	t
code	chunk.h	/^    uint8_t* code;$/;"	m	struct:__anonc3a0ef940208	typeref:typename:uint8_t *
col	scanner.c	/^    int col;$/;"	m	struct:__anond6e0f0600108	typeref:typename:int	file:
compile	compiler.c	/^ObjFunction* compile(const char* source) {$/;"	f	typeref:typename:ObjFunction *
concatenate	vm.c	/^static void concatenate() {$/;"	f	typeref:typename:void	file:
constantInstruction	debug.c	/^static int constantInstruction(const char* name, Chunk *chunk, int offset) {$/;"	f	typeref:typename:int	file:
constants	chunk.h	/^    ValueArray constants;$/;"	m	struct:__anonc3a0ef940208	typeref:typename:ValueArray
consume	compiler.c	/^static void consume(TokenType type, const char* message) {$/;"	f	typeref:typename:void	file:
copyString	object.c	/^ObjString* copyString(const char* chars, int length) {$/;"	f	typeref:typename:ObjString *
count	chunk.h	/^    uint32_t count, capacity;$/;"	m	struct:__anonc3a0ef940208	typeref:typename:uint32_t
count	table.h	/^    int count;$/;"	m	struct:__anonce91d8230208	typeref:typename:int
count	value.h	/^    int count;$/;"	m	struct:__anon694036180408	typeref:typename:int
current	compiler.c	/^    Token current;$/;"	m	struct:__anon8a0484b10108	typeref:typename:Token	file:
current	compiler.c	/^Compiler* current = NULL;$/;"	v	typeref:typename:Compiler *
current	scanner.c	/^    const char* current;$/;"	m	struct:__anond6e0f0600108	typeref:typename:const char *	file:
currentChunk	compiler.c	/^static Chunk* currentChunk() {$/;"	f	typeref:typename:Chunk *	file:
declaration	compiler.c	/^static void declaration() {$/;"	f	typeref:typename:void	file:
declareVariable	compiler.c	/^static void declareVariable() {$/;"	f	typeref:typename:void	file:
default	Makefile	/^default: clox$/;"	t
defineNative	vm.c	/^static void defineNative(const char* name, NativeFn function) {$/;"	f	typeref:typename:void	file:
defineVariable	compiler.c	/^static void defineVariable(uint8_t global) {$/;"	f	typeref:typename:void	file:
depth	compiler.c	/^    int depth;$/;"	m	struct:__anon8a0484b10408	typeref:typename:int	file:
disassembleChunk	debug.c	/^void disassembleChunk(Chunk* chunk, const char* name) {$/;"	f	typeref:typename:void
disassembleInstruction	debug.c	/^int disassembleInstruction(Chunk* chunk, int offset) {$/;"	f	typeref:typename:int
emitByte	compiler.c	/^static void emitByte(uint8_t byte) {$/;"	f	typeref:typename:void	file:
emitBytes	compiler.c	/^static void emitBytes(uint8_t a, uint8_t b) {$/;"	f	typeref:typename:void	file:
emitConstant	compiler.c	/^static void emitConstant(Value value) {$/;"	f	typeref:typename:void	file:
emitJump	compiler.c	/^static int emitJump(uint8_t instruction) {$/;"	f	typeref:typename:int	file:
emitLoop	compiler.c	/^static void emitLoop(int loopStart) {$/;"	f	typeref:typename:void	file:
emitReturn	compiler.c	/^static void emitReturn() {$/;"	f	typeref:typename:void	file:
enclosing	compiler.c	/^    struct Compiler* enclosing;$/;"	m	struct:Compiler	typeref:struct:Compiler *	file:
endCompile	compiler.c	/^static ObjFunction* endCompile() {$/;"	f	typeref:typename:ObjFunction *	file:
endScope	compiler.c	/^static void endScope() {$/;"	f	typeref:typename:void	file:
entries	table.h	/^    Entry* entries;$/;"	m	struct:__anonce91d8230208	typeref:typename:Entry *
errorAt	compiler.c	/^static void errorAt(Token* token, const char* message) {$/;"	f	typeref:typename:void	file:
errorAtCurrent	compiler.c	/^static void errorAtCurrent(const char* message) {$/;"	f	typeref:typename:void	file:
errorToken	scanner.c	/^static Token errorToken(const char* msg) {$/;"	f	typeref:typename:Token	file:
expression	compiler.c	/^static void expression() {$/;"	f	typeref:typename:void	file:
expressionStatement	compiler.c	/^static void expressionStatement() {$/;"	f	typeref:typename:void	file:
findEntry	table.c	/^static Entry* findEntry(Entry* entries, int capacity,$/;"	f	typeref:typename:Entry *	file:
forStatement	compiler.c	/^static void forStatement() {$/;"	f	typeref:typename:void	file:
frameCount	vm.h	/^    int frameCount;$/;"	m	struct:__anon7c9f9a3e0208	typeref:typename:int
frames	vm.h	/^    CallFrame frames[FRAMES_MAX];$/;"	m	struct:__anon7c9f9a3e0208	typeref:typename:CallFrame[]
freeChunk	chunk.c	/^void freeChunk(Chunk* chunk) {$/;"	f	typeref:typename:void
freeObject	memory.c	/^void freeObject(Obj* object) {$/;"	f	typeref:typename:void
freeObjects	memory.c	/^void freeObjects() {$/;"	f	typeref:typename:void
freeTable	table.c	/^void freeTable(Table* table) {$/;"	f	typeref:typename:void
freeVM	vm.c	/^void freeVM() {$/;"	f	typeref:typename:void
freeValueArray	value.c	/^void freeValueArray(ValueArray* arr) {$/;"	f	typeref:typename:void
funDeclaration	compiler.c	/^static void funDeclaration() {$/;"	f	typeref:typename:void	file:
function	compiler.c	/^    ObjFunction* function;$/;"	m	struct:Compiler	typeref:typename:ObjFunction *	file:
function	compiler.c	/^static void function(FunctionType type) {$/;"	f	typeref:typename:void	file:
function	object.h	/^    NativeFn function;$/;"	m	struct:__anon62a894520408	typeref:typename:NativeFn
function	object.h	/^    ObjFunction* function;$/;"	m	struct:__anon62a894520308	typeref:typename:ObjFunction *
getRule	compiler.c	/^static ParseRule* getRule(TokenType type) {$/;"	f	typeref:typename:ParseRule *	file:
globals	vm.h	/^    Table globals;$/;"	m	struct:__anon7c9f9a3e0208	typeref:typename:Table
grouping	compiler.c	/^static void grouping(bool _) {$/;"	f	typeref:typename:void	file:
hadError	compiler.c	/^    bool hadError;$/;"	m	struct:__anon8a0484b10108	typeref:typename:bool	file:
hash	object.h	/^    uint32_t hash;$/;"	m	struct:ObjString	typeref:typename:uint32_t
hashString	object.c	/^static uint32_t hashString(const char* key, int length) {$/;"	f	typeref:typename:uint32_t	file:
identifier	scanner.c	/^static Token identifier() {$/;"	f	typeref:typename:Token	file:
identifierConstant	compiler.c	/^static uint8_t identifierConstant(Token* name) {$/;"	f	typeref:typename:uint8_t	file:
identifierType	scanner.c	/^static TokenType identifierType() {$/;"	f	typeref:typename:TokenType	file:
identifiersEqual	compiler.c	/^static bool identifiersEqual(Token* a, Token* b) {$/;"	f	typeref:typename:bool	file:
ifStatement	compiler.c	/^static void ifStatement() {$/;"	f	typeref:typename:void	file:
index	compiler.c	/^    uint8_t index;$/;"	m	struct:__anon8a0484b10508	typeref:typename:uint8_t	file:
infix	compiler.c	/^    ParseFn infix;$/;"	m	struct:__anon8a0484b10308	typeref:typename:ParseFn	file:
initChunk	chunk.c	/^void initChunk(Chunk* chunk) {$/;"	f	typeref:typename:void
initCompiler	compiler.c	/^static void initCompiler(Compiler* compiler, FunctionType type) {$/;"	f	typeref:typename:void	file:
initScanner	scanner.c	/^void initScanner(const char* source) {$/;"	f	typeref:typename:void
initTable	table.c	/^void initTable(Table* table) {$/;"	f	typeref:typename:void
initVM	vm.c	/^void initVM() {$/;"	f	typeref:typename:void
initValueArray	value.c	/^void initValueArray(ValueArray* arr) {$/;"	f	typeref:typename:void
interpret	vm.c	/^InterpretResult interpret(const char* source) {$/;"	f	typeref:typename:InterpretResult
ip	vm.h	/^    uint8_t* ip;$/;"	m	struct:__anon7c9f9a3e0108	typeref:typename:uint8_t *
isAlpha	scanner.c	/^static bool isAlpha(char c) {$/;"	f	typeref:typename:bool	file:
isAtEnd	scanner.c	/^static bool isAtEnd() {$/;"	f	typeref:typename:bool	file:
isDigit	scanner.c	/^static bool isDigit(char c) {$/;"	f	typeref:typename:bool	file:
isFalsey	vm.c	/^static bool isFalsey(Value value) {$/;"	f	typeref:typename:bool	file:
isLocal	compiler.c	/^    bool isLocal;$/;"	m	struct:__anon8a0484b10508	typeref:typename:bool	file:
isObjType	object.h	/^static inline bool isObjType(Value value, ObjType type) {$/;"	f	typeref:typename:bool
jumpInstruction	debug.c	/^static int jumpInstruction(const char* name, int sign, Chunk *chunk, int offset) {$/;"	f	typeref:typename:int	file:
key	table.h	/^    ObjString* key;$/;"	m	struct:__anonce91d8230108	typeref:typename:ObjString *
length	object.h	/^    int length;$/;"	m	struct:ObjString	typeref:typename:int
length	scanner.h	/^    int length;$/;"	m	struct:__anond6e0f0650208	typeref:typename:int
line	scanner.c	/^    int line;$/;"	m	struct:__anond6e0f0600108	typeref:typename:int	file:
line	scanner.h	/^    int line;$/;"	m	struct:__anond6e0f0650208	typeref:typename:int
line_start	scanner.c	/^    const char* line_start;$/;"	m	struct:__anond6e0f0600108	typeref:typename:const char *	file:
lines	chunk.h	/^    int* lines;$/;"	m	struct:__anonc3a0ef940208	typeref:typename:int *
literal	compiler.c	/^static void literal(bool _) {$/;"	f	typeref:typename:void	file:
localCount	compiler.c	/^    int localCount;$/;"	m	struct:Compiler	typeref:typename:int	file:
locals	compiler.c	/^    Local locals[UINT8_COUNT];$/;"	m	struct:Compiler	typeref:typename:Local[]	file:
location	object.h	/^    Value* location;$/;"	m	struct:ObjUpvalue	typeref:typename:Value *
main	Makefile	/^main: *.c$/;"	t
main	main.c	/^int main(int argc, const char* argv[]) {$/;"	f	typeref:typename:int
makeConstant	compiler.c	/^static uint8_t makeConstant(Value value) {$/;"	f	typeref:typename:uint8_t	file:
makeToken	scanner.c	/^static Token makeToken(TokenType type) {$/;"	f	typeref:typename:Token	file:
markInitialized	compiler.c	/^static void markInitialized() {$/;"	f	typeref:typename:void	file:
match	compiler.c	/^static bool match(TokenType type) {$/;"	f	typeref:typename:bool	file:
match	scanner.c	/^static char match(char c) {$/;"	f	typeref:typename:char	file:
name	compiler.c	/^    Token name;$/;"	m	struct:__anon8a0484b10408	typeref:typename:Token	file:
name	object.h	/^    ObjString* name;$/;"	m	struct:__anon62a894520208	typeref:typename:ObjString *
namedVariable	compiler.c	/^static void namedVariable(Token name, bool canAssign) {$/;"	f	typeref:typename:void	file:
newClosure	object.c	/^ObjClosure* newClosure(ObjFunction* function) {$/;"	f	typeref:typename:ObjClosure *
newFunction	object.c	/^ObjFunction* newFunction() {$/;"	f	typeref:typename:ObjFunction *
newNative	object.c	/^ObjNative* newNative(NativeFn function) {$/;"	f	typeref:typename:ObjNative *
newUpvalue	object.c	/^ObjUpvalue* newUpvalue(Value* slot) {$/;"	f	typeref:typename:ObjUpvalue *
next	object.h	/^    Obj* next;$/;"	m	struct:Obj	typeref:typename:Obj *
number	compiler.c	/^static void number(bool _) {$/;"	f	typeref:typename:void	file:
number	scanner.c	/^static Token number() {$/;"	f	typeref:typename:Token	file:
number	value.h	/^        double number;$/;"	m	union:__anon694036180208::__anon69403618030a	typeref:typename:double
obj	object.h	/^    Obj obj;$/;"	m	struct:ObjString	typeref:typename:Obj
obj	object.h	/^    Obj obj;$/;"	m	struct:ObjUpvalue	typeref:typename:Obj
obj	object.h	/^    Obj obj;$/;"	m	struct:__anon62a894520208	typeref:typename:Obj
obj	object.h	/^    Obj obj;$/;"	m	struct:__anon62a894520308	typeref:typename:Obj
obj	object.h	/^    Obj obj;$/;"	m	struct:__anon62a894520408	typeref:typename:Obj
obj	value.h	/^        Obj* obj;$/;"	m	union:__anon694036180208::__anon69403618030a	typeref:typename:Obj *
objects	vm.h	/^    Obj* objects;$/;"	m	struct:__anon7c9f9a3e0208	typeref:typename:Obj *
or_	compiler.c	/^static void or_(bool canAssign) {$/;"	f	typeref:typename:void	file:
panicMode	compiler.c	/^    bool panicMode;$/;"	m	struct:__anon8a0484b10108	typeref:typename:bool	file:
parsePrecedence	compiler.c	/^static void parsePrecedence(Precedence precedence) {$/;"	f	typeref:typename:void	file:
parseVariable	compiler.c	/^static uint8_t parseVariable(const char* errorMessage) {$/;"	f	typeref:typename:uint8_t	file:
parser	compiler.c	/^Parser parser;$/;"	v	typeref:typename:Parser
patchJump	compiler.c	/^static void patchJump(int offset) {$/;"	f	typeref:typename:void	file:
peek	scanner.c	/^static char peek() {$/;"	f	typeref:typename:char	file:
peek	vm.c	/^Value peek(int i) {$/;"	f	typeref:typename:Value
peekNext	scanner.c	/^static char peekNext() {$/;"	f	typeref:typename:char	file:
pop	vm.c	/^Value pop() {$/;"	f	typeref:typename:Value
precedence	compiler.c	/^    Precedence precedence;$/;"	m	struct:__anon8a0484b10308	typeref:typename:Precedence	file:
prefix	compiler.c	/^    ParseFn prefix;$/;"	m	struct:__anon8a0484b10308	typeref:typename:ParseFn	file:
previous	compiler.c	/^    Token previous;$/;"	m	struct:__anon8a0484b10108	typeref:typename:Token	file:
printFunction	object.c	/^static void printFunction(ObjFunction* function) {$/;"	f	typeref:typename:void	file:
printObject	object.c	/^void printObject(Value value) {$/;"	f	typeref:typename:void
printStatement	compiler.c	/^static void printStatement() {$/;"	f	typeref:typename:void	file:
printValue	value.c	/^void printValue(Value value) {$/;"	f	typeref:typename:void
push	vm.c	/^void push(Value value) {$/;"	f	typeref:typename:void
readFile	main.c	/^static char* readFile(const char* path) {$/;"	f	typeref:typename:char *	file:
reallocate	memory.c	/^void* reallocate(void* ptr, size_t olds, size_t news) {$/;"	f	typeref:typename:void *
repl	main.c	/^static void repl() {$/;"	f	typeref:typename:void	file:
resetStack	vm.c	/^static void resetStack() {$/;"	f	typeref:typename:void	file:
resolveLocal	compiler.c	/^static int resolveLocal(Compiler* compiler, Token* name) {$/;"	f	typeref:typename:int	file:
resolveUpvalue	compiler.c	/^static int resolveUpvalue(Compiler* compiler, Token* name) {$/;"	f	typeref:typename:int	file:
returnStatement	compiler.c	/^static void returnStatement() {$/;"	f	typeref:typename:void	file:
rules	compiler.c	/^ParseRule rules[] = {$/;"	v	typeref:typename:ParseRule[]
run	Makefile	/^run: clox$/;"	t
run	vm.c	/^static InterpretResult run() {$/;"	f	typeref:typename:InterpretResult	file:
runFile	main.c	/^static void runFile(const char* path) {$/;"	f	typeref:typename:void	file:
runtimeError	vm.c	/^static void runtimeError(const char* format, ...) {$/;"	f	typeref:typename:void	file:
scanToken	scanner.c	/^Token scanToken() {$/;"	f	typeref:typename:Token
scanner	scanner.c	/^Scanner scanner;$/;"	v	typeref:typename:Scanner
scopeDepth	compiler.c	/^    int scopeDepth;$/;"	m	struct:Compiler	typeref:typename:int	file:
simpleInstruction	debug.c	/^static int simpleInstruction(const char* name, int offset) {$/;"	f	typeref:typename:int	file:
skipWhitespace	scanner.c	/^static void skipWhitespace() {$/;"	f	typeref:typename:void	file:
slots	vm.h	/^    Value* slots;$/;"	m	struct:__anon7c9f9a3e0108	typeref:typename:Value *
stack	vm.h	/^    Value stack[STACK_MAX];$/;"	m	struct:__anon7c9f9a3e0208	typeref:typename:Value[]
stackTop	vm.h	/^    Value *stackTop;$/;"	m	struct:__anon7c9f9a3e0208	typeref:typename:Value *
start	scanner.c	/^    const char* start;$/;"	m	struct:__anond6e0f0600108	typeref:typename:const char *	file:
start	scanner.h	/^    const char* start;$/;"	m	struct:__anond6e0f0650208	typeref:typename:const char *
statement	compiler.c	/^static void statement() {$/;"	f	typeref:typename:void	file:
string	compiler.c	/^static void string(bool _) {$/;"	f	typeref:typename:void	file:
string	scanner.c	/^static Token string() {$/;"	f	typeref:typename:Token	file:
strings	vm.h	/^    Table strings;$/;"	m	struct:__anon7c9f9a3e0208	typeref:typename:Table
synchronize	compiler.c	/^static void synchronize() {$/;"	f	typeref:typename:void	file:
tableAddAll	table.c	/^void tableAddAll(Table* from, Table* to) {$/;"	f	typeref:typename:void
tableDelete	table.c	/^bool tableDelete(Table* table, ObjString* key) {$/;"	f	typeref:typename:bool
tableFindString	table.c	/^ObjString* tableFindString(Table* table, const char* chars, int length, uint32_t hash) {$/;"	f	typeref:typename:ObjString *
tableGet	table.c	/^bool tableGet(Table* table, ObjString* key, Value* value) {$/;"	f	typeref:typename:bool
tableSet	table.c	/^bool tableSet(Table* table, ObjString* key, Value value) {$/;"	f	typeref:typename:bool
takeString	object.c	/^ObjString* takeString(char* chars, int length) {$/;"	f	typeref:typename:ObjString *
type	compiler.c	/^    FunctionType type;$/;"	m	struct:Compiler	typeref:typename:FunctionType	file:
type	object.h	/^    ObjType type;$/;"	m	struct:Obj	typeref:typename:ObjType
type	scanner.h	/^    TokenType type;$/;"	m	struct:__anond6e0f0650208	typeref:typename:TokenType
type	value.h	/^    ValueType type;$/;"	m	struct:__anon694036180208	typeref:typename:ValueType
unary	compiler.c	/^static void unary(bool _) {$/;"	f	typeref:typename:void	file:
upvalueCount	object.h	/^    int upvalueCount;$/;"	m	struct:__anon62a894520208	typeref:typename:int
upvalueCount	object.h	/^    int upvalueCount;$/;"	m	struct:__anon62a894520308	typeref:typename:int
upvalues	compiler.c	/^    Upvalue upvalues[UINT8_COUNT];$/;"	m	struct:Compiler	typeref:typename:Upvalue[]	file:
upvalues	object.h	/^    ObjUpvalue** upvalues;$/;"	m	struct:__anon62a894520308	typeref:typename:ObjUpvalue **
value	table.h	/^    Value value;$/;"	m	struct:__anonce91d8230108	typeref:typename:Value
values	value.h	/^    Value* values;$/;"	m	struct:__anon694036180408	typeref:typename:Value *
valuesEqual	value.c	/^bool valuesEqual(Value a, Value b) {$/;"	f	typeref:typename:bool
varDeclaration	compiler.c	/^static void varDeclaration() {$/;"	f	typeref:typename:void	file:
variable	compiler.c	/^static void variable(bool canAssign) {$/;"	f	typeref:typename:void	file:
vm	vm.c	/^VM vm;$/;"	v	typeref:typename:VM
whileStatement	compiler.c	/^static void whileStatement() {$/;"	f	typeref:typename:void	file:
writeChunk	chunk.c	/^void writeChunk(Chunk* chunk, uint8_t byte, int line) {$/;"	f	typeref:typename:void
writeConstant	chunk.c	/^void writeConstant(Chunk* chunk, Value value, int line) {$/;"	f	typeref:typename:void
writeValueArray	value.c	/^void writeValueArray(ValueArray* arr, Value value) {$/;"	f	typeref:typename:void
